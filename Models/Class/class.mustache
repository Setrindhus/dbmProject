//const dbname = './/Database/DataBase.db';
const dbname = './Publish/Database/DataBase.db';

function {{title}} ({{propertiesJoin}}) {
    {{#properties}}
        this.{{name}} = {{name}};
        {{^required}}Object.defineProperty(this,'{{name}}',{ enumerable:false});{{/required}}         
    {{/properties}}
        Object.defineProperty(this,'{{primaryKey.name}}',{ enumerable:false});
}

var database = require('../../Models/Database/sqlite.js')(dbname);

{{title}}.all = function (callback) {
    database.all('Select * From {{title}}',{{title}},callback)
}

{{title}}.get = function (id, callback) {
    database.get('Select * From {{title}}} Where {{table}}_id = ?', [id], {{title}},callback)
}

{{title}}.delete = function (id, callback) {
    if(this.{{primaryKey.name}}){
        database.run('Delete From {{title}} Where {{table}}_id = ?', [{{{propertiesJoinThis}}},id],callback);
    }
}

{{title}}.prototype.save = function (callback) {
    if(this.{{primaryKey.name}}) { //Se existir valor no id serÃ¡ para update
        database.run('Update {{title}} Set {{{propertiesSetValues}}} Where {{table}}_id = ?', [{{{propertiesJoinThis}}},id], callback);
    } else { //caso contrÃ¡rio para insert
        database.run('Insert Into {{title}} ({{{propertiesJoin}}}) Values ({{{propertiesValuesParams}}})',[{{{propertiesJoinThis}}}], callback);
    }
}

{{title}}.many = function (model, id, callback) {
    database.where(`Select {{title}}.* From {{title}} Inner Join ${model}_{{title}} On ${model}_{{title}}.{{table}}_id =
     {{title}}.{{table}}_id Where ${model}_{{title}}.${model.toLowerCase()}_id = ?`, [id], {{title}}, callback);
}

{{title}}.mappingDBtoObject = {
    {{{mappingDBtoObject}}}
}

module.exports = {{title}};